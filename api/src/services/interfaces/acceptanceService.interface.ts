import { Types } from 'mongoose';
import { AcceptedWordType } from '../../types/vocabulary.types'; // Импортируем общий тип принятого слова

// Описываем входные данные для execute
export interface AcceptSuggestionInput {
    suggestedWordId: string | Types.ObjectId;
    moderatorTelegramId: number;
    language: 'russian' | 'buryat';
}

/**
 * Описывает контракт для сервиса, отвечающего за процесс принятия предложенных слов.
 */
export interface IAcceptanceService {
    /**
     * Принимает предложенное слово (или перевод) и выполняет все необходимые операции:
     * - Поиск предложенного слова и модератора.
     * - Проверка на существование уже принятого слова с таким же текстом.
     * - Создание нового принятого слова или обновление существующего (слияние контрибьюторов).
     * - Обновление связей с переводами (pre_translations).
     * - Удаление исходного предложенного слова.
     * - Обновление рейтинга участников.
     * Все операции выполняются в рамках транзакции.
     *
     * @param suggestedWordId ID предложенного слова (русского или бурятского).
     * @param moderatorTelegramId Telegram ID модератора, выполняющего действие.
     * @param language Язык предложенного слова ('russian' или 'buryat').
     * @returns Промис, который разрешается объектом принятого слова (lean-объект) после успешного принятия.
     * @throws {NotFoundError} Если предложенное слово или модератор не найдены (в зависимости от реализации).
     * @throws {DatabaseError} При ошибках базы данных во время транзакции.
     * @throws {ConflictError} Если слово уже было обработано ранее (опционально).
     */
    execute(input: AcceptSuggestionInput): Promise<AcceptedWordType>;

    // Сюда можно добавить другие методы, если сервис принятия будет делать что-то еще,
    // например, принимать не слова, а другие сущности.
}

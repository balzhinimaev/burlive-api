// src/initLevels.ts
import mongoose from 'mongoose';
// import LevelModel from './models/Level';
import dotenv from 'dotenv';
import TelegramUserModel from './models/TelegramUsers';
import LevelModel from './models/Level';
dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env

async function initLevels() {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mongoose.connect(<string>process.env.MONGO_URL, {
        dbName: 'burlive'
    })
        .then(() => {
            console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        });

    const levels = [
        { name: "–≠—Ö–∏–Ω", icon: "üå±", minRating: 0, maxRating: 800 },
        { name: "–ë–∞–≥—à–∞", icon: "üìñ", minRating: 801, maxRating: 1500 },
        { name: "–ì—ç—Ä—ç–ª", icon: "üåû", minRating: 1501, maxRating: 2000 },
        { name: "–ê–ª—Ç–∞–Ω", icon: "üí∞", minRating: 2001, maxRating: 2600 },
        { name: "–ë–∞–∞—Ç–∞—Ä", icon: "üõ°", minRating: 2601, maxRating: 3200 },
        { name: "–≠—Ä–¥—ç–º—Ç—ç–Ω", icon: "üå≥", minRating: 3201, maxRating: 4000 },
        { name: "–•—É–±–∏—Å—Ö–∞–ª", icon: "üîî", minRating: 4001, maxRating: 5000 },
        { name: "–°–æ—ë–ª", icon: "üåå", minRating: 5001, maxRating: null }, // null –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    ];

    for (const levelData of levels) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingLevel = await LevelModel.findOne({ name: levelData.name });
        if (!existingLevel) {
            const level = new LevelModel(levelData);
            await level.save();
            console.log(`–£—Ä–æ–≤–µ–Ω—å "${level.name}" —Å–æ–∑–¥–∞–Ω.`);
        } else {
            console.log(`–£—Ä–æ–≤–µ–Ω—å "${existingLevel.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
        }
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await mongoose.disconnect();
}
async function testUserLevelUpdate() {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mongoose.connect(<string>process.env.MONGO_URL, {
        dbName: 'burlive'
    })
        .then(() => {
            console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        });

    const user = await TelegramUserModel.findOne({ username: 'frntdev' });
    if (user) {
        user.rating = 1200; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–Ω—é "–ë–∞–∞—Ç–∞—Ä"
        await user.updateLevel()
        await user.save(); // –£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è pre-save —Ö—É–∫—É

        // –ü–æ–ø—É–ª–∏—Ä—É–µ–º –ø–æ–ª–µ level –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await user.populate('level');

        //@ts-ignore
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å: ${user.level.name}`); // –î–æ–ª–∂–µ–Ω –≤—ã–≤–µ—Å—Ç–∏ "–ë–∞–∞—Ç–∞—Ä"
    } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
}
testUserLevelUpdate().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
});
// initLevels()
initLevels().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π:', error);
});

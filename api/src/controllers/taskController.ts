import { Request, Response } from 'express';
import Task, { ITask } from '../models/Task';
import TaskCompletion from '../models/TaskCompletion';
import TelegramUserModel from '../models/TelegramUsers';
import logger from '../utils/logger';
import { isValidObjectId } from 'mongoose';
import Promotion from '../models/Promotion';
// import { cp } from 'fs';

class TaskController {
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
     * –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞:
     * - title: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
     * - description: –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ)
     * - taskType: —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'subscription', 'translation', 'data_entry' –∏–ª–∏ 'other')
     * - rewardPoints: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
     * - imageUrl: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
     */
    async createTask(req: Request, res: Response): Promise<void> {
        try {
            const { title, description, taskType, rewardPoints, imageUrl } =
                req.body;
            if (!title || !taskType || rewardPoints === undefined) {
                res.status(400).json({
                    message: '–ü–æ–ª—è title, taskType –∏ rewardPoints –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
                });
                return;
            }

            const newTask = new Task({
                title,
                description,
                taskType,
                rewardPoints,
                imageUrl: imageUrl || '',
            });
            await newTask.save();
            res.status(201).json({ message: '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ', task: newTask });
        } catch (error) {
            console.error(error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è' });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π.
     */
    async getTasks(_req: Request, res: Response): Promise<void> {
        try {
            const tasks = await Task.find().sort({ order: 1 });
            res.status(200).json({ tasks });
            logger.info(`–ó–∞–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã`);
            // logger.info(tasks)
        } catch (error) {
            console.error(error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π' });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
     */
    async getTasksExtended(req: Request, res: Response): Promise<void> {
        try {
            const { userId, promotionId } = req.params;

            if (!isValidObjectId(userId) || !isValidObjectId(promotionId)) {
                res.status(404).json({
                    message: 'userId & promotionId must be ObjectID',
                });
                return;
            }

            const user = await TelegramUserModel.findById(userId);

            if (!user) {
                logger.info(
                    `üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å tasks/:userId, —Ö–æ—Ç—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`,
                );
                res.status(404).json({ message: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                return;
            }

            const promotion = await Promotion.findById(promotionId);

            if (!promotion) {
                logger.info(
                    `üü° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å tasks/:userId/:promotionId, —Ö–æ—Ç—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ promotion`,
                );
                res.status(404).json({ message: 'promotion –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                return;
            }

            // Get all active tasks for this promotion
            const allTasks = await Task.find({
                promotionId,
                status: 'active',
            }).sort({ order: 1 });

            const completedTaskRecords = await TaskCompletion.find({
                promotion: promotionId,
                user: userId,
            }).populate('task');


            logger.info(`–í—ã–ø–æ–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ${completedTaskRecords}`)

            // Extract the task IDs from completed task records
            const completedTaskIds = completedTaskRecords.map((record) =>
                record.task._id.toString(),
            );

            // Filter out completed tasks from the available tasks
            const availableTasks = allTasks.filter(
                (task: ITask) => !completedTaskIds.includes(task._id.toString()),
            );

            // Get the full completed task details
            const completedTasks = await Task.find({
                _id: { $in: completedTaskIds },
                promotionId,
            });

            // Return both lists separately
            res.status(200).json({
                tasks: availableTasks,
                completedTasks,
                completedTaskRecords
            });

            logger.info(
                `–ó–∞–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∏ –∞–∫—Ü–∏–∏ ${promotionId}`,
            );
        } catch (error) {
            console.error(error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π' });
        }
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.
     * –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã:
     * - taskId: ID –∑–∞–¥–∞–Ω–∏—è,
     * - userId: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
     * - promotionId: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ID –∞–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–∫—Ü–∏–µ–π.
     */
    async completeTask(req: Request, res: Response): Promise<void> {
        try {
            const { taskId, userId, promotionId } = req.body;
            if (!taskId || !userId) {
                res.status(400).json({
                    message: 'taskId –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
                });
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏ dailyRating, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            const user = await TelegramUserModel.findById(userId);

            if (!user) {
                res.status(400).json({
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è',
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            const task = await Task.findById(taskId);
            if (!task) {
                res.status(404).json({ message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            const existing = await TaskCompletion.findOne({
                task: taskId,
                user: userId,
            });

            if (existing) {
                logger.info(
                    `–ó–∞–¥–∞–Ω–∏–µ ${task.title}/${task.taskType} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.username ? user.username : user.id}`,
                );
                res.status(400).json({ message: '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
            const taskCompletion = new TaskCompletion({
                task: taskId,
                user: userId,
                promotion: promotionId, // –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∞–∫—Ü–∏–∏
                rewardPoints: task.rewardPoints,
            });

            await taskCompletion.save();
            logger.info(
                `–ó–∞–¥–∞–Ω–∏–µ ${task.title}/${task.taskType} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.username ? user.username : user.id}`,
            );

            user.rating += task.rewardPoints;
            user.dailyRating += task.rewardPoints;
            await user.save();

            res.status(200).json({
                message: '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                taskCompletion,
            });
        } catch (error) {
            console.error(error);
            res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è' });
        }
    }
}

export default new TaskController();
